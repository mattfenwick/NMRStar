package edu.uchc.connjur.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map.Entry;

import edu.uchc.connjur.nmrstar.Data;
import edu.uchc.connjur.nmrstar.Key;
import edu.uchc.connjur.nmrstar.Loop;
import edu.uchc.connjur.nmrstar.Name;
import edu.uchc.connjur.nmrstar.Save;
import edu.uchc.connjur.nmrstar.Value;



public class Serializer {

	public Serializer() {
		
	}
	
	public StringBuilder nmrStar(Data d) {
		StringBuilder sb = new StringBuilder();
		sb.append("# generated by Connjur's NMRStar library\n");
		dataBlock(sb, d);
		return sb;
	}
	
	public void dataBlock(StringBuilder sb, Data d) {
		sb.append("data_");
		sb.append(d.name.value);
		sb.append("\n"); // should this be System.newline ????
		ArrayList<Entry<Name, Save>> items = new ArrayList<Entry<Name, Save>>(d.saveFrames.entrySet());
		Comparator<Entry<Name, Save>>comparator = new Comparator<Entry<Name, Save>>() {
			public int compare(Entry<Name, Save> o1, Entry<Name, Save> o2) {
				return o1.getKey().value.compareTo(o2.getKey().value);
			}
		};
		Collections.sort(items, comparator);
		for ( Entry<Name, Save> entry : items ) {
			saveFrame(sb, entry.getKey(), entry.getValue());
		}
	}
	
	public void saveFrame(StringBuilder sb, Name n, Save s) {
		sb.append("\n  save_" + n.value + "\n\n");
		ArrayList<Entry<Key, Value>> keyVals = new ArrayList<Entry<Key, Value>>(s.keyVals.entrySet());
		Comparator<Entry<Key, Value>> comparator = new Comparator<Entry<Key, Value>>() {
			public int compare(Entry<Key, Value> o1, Entry<Key, Value> o2) {
				return o1.getKey().key.compareTo(o2.getKey().key);
			}
		};
		Collections.sort(keyVals, comparator);
		for ( Entry<Key, Value> kv : keyVals ) {
			sb.append("    ");
			sb.append(key(kv.getKey()));
			sb.append(" ");
			sb.append(value(kv.getValue()));
			sb.append("\n");
		}
		for ( Loop l : s.loops ) {
			loop(sb, l);
		}
		sb.append("\n  save_\n");
	}
	
	public String key(Key k) {
		return '_' + k.key;
	}
	
	public String value(Value v) {
		switch (v.type) {
			case Doublequoted: return '"' + v.value + '"';
			case Singlequoted: return "'" + v.value + "'";
			case Unquoted: return v.value;
			case Semicolonquoted: return "\n;" + v.value + "\n;" + "\n"; // the last \n isn't necessary, but looks nice
			default: throw new RuntimeException("oops, program bug -- unexpected enum value");
		}
	}
	
	public void loop(StringBuilder sb, Loop l) {
		sb.append("\n    loop_\n");
		sb.append("      ");
		for ( Key k : l.keys) {
			sb.append(key(k) + " ");
		}
		sb.append("\n\n");
		for ( List<Value> row : l.rows) {
			sb.append("      ");
			for ( Value v : row ) {
				sb.append(value(v) + " ");
			}
			sb.append("\n");
		}
		sb.append("    stop_\n");
	}
}
